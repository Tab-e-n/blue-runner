[gd_scene load_steps=18 format=2]

[ext_resource path="res://Visual/Level/base_neutral.png" type="Texture" id=1]
[ext_resource path="res://Control/Generic_Theme.tres" type="Theme" id=2]
[ext_resource path="res://Visual/Level/questionmark.png" type="Texture" id=3]
[ext_resource path="res://Visual/Editor/editor_cog.png" type="Texture" id=4]
[ext_resource path="res://Text/Text_Editor.tscn" type="PackedScene" id=5]
[ext_resource path="res://Visual/Editor/editor_load.png" type="Texture" id=6]
[ext_resource path="res://Visual/Editor/editor_empty.png" type="Texture" id=7]
[ext_resource path="res://Visual/Editor/editor_cog_enabled.png" type="Texture" id=8]
[ext_resource path="res://Visual/Editor/editor_load_enabled.png" type="Texture" id=9]
[ext_resource path="res://Visual/Editor/editor_exit_enabled.png" type="Texture" id=10]
[ext_resource path="res://Visual/Editor/editor_exit.png" type="Texture" id=11]
[ext_resource path="res://Visual/Editor/editor_new_enabled.png" type="Texture" id=12]
[ext_resource path="res://Visual/Editor/editor_new.png" type="Texture" id=13]
[ext_resource path="res://Visual/Editor/editor_refresh.png" type="Texture" id=14]
[ext_resource path="res://Visual/Editor/editor_refresh_enabled.png" type="Texture" id=15]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var current_level : int = 0

var current_group_path : String = \"\"

var level_group_dat : Dictionary = {
	\"levels\" : range(20),
	\"dependencies\" : [],
	\"bg\" : \"*none\",
	\"unlock\" : [0, \"\", \"\"],
	\"author\" : \"Unknown\",
	\"ui_color\" : [0.02, 0.9, 0.63],
}

enum {UNLOCK_ALWAYS, UNLOCK_BEAT, UNLOCK_PAR, UNLOCK_COMPLETION, UNLOCK_BONUS, UNLOCK_CUSTOM, UNLOCK_NEVER}

func _ready():
	for i in range(20): level_group_dat[\"levels\"][i] = [\"*Level_Missing\", true, [0, \"\", \"\"]]
	
	ready_optionbutton_setup($level_edits/level_icon, data.level_icon)
	ready_optionbutton_setup($level_edits/level_base, data.level_base)
	ready_optionbutton_setup($settings/bg, data.bg)
	$settings/bg.set_item_metadata(0, \"*\")
	
	var packed_level = PackedScene.new()
	$\"levels/0/base\".set_owner($\"levels/0\")
	$\"levels/0/icon\".set_owner($\"levels/0\")
	packed_level.pack($\"levels/0\")
	
	for i in range(19):
		var new_level : Button = packed_level.instance()
		get_node(\"levels\").add_child(new_level)
		new_level.name = String(i + 1)
		new_level.rect_position.x = (i + 1) % 5 * 96 + 40
		# warning-ignore:integer_division
		new_level.rect_position.y = (i + 1) / 5 * 96 + 40
		# warning-ignore:return_value_discarded
		new_level.connect(\"toggled\", self, \"level_toggled\", [i + 1])
		pass
	
	$\"levels/0\".pressed = true
	
	load_level_visuals()
	
	data.changed_unlock_type(0, $settings/text_edit, $settings/unlock_type, $\"settings/1_text\", $\"settings/2_text\", $\"settings/2_number\", \"\\n\")
	data.changed_unlock_type(-1, $level_edits/text_level_unlocks, $level_edits/level_unlock_type, $\"level_edits/level_1_text\", $\"level_edits/level_2_text\", $\"level_edits/level_2_number\", \"\")

func _process(_delta):
	if Input.is_action_just_pressed(\"25\"):
		on_exit()
	
	$group/refresh.visible = !$settings_toggle.pressed
	$title/picture.visible = !$settings_toggle.pressed
	$title/logo.visible = !$settings_toggle.pressed
	$settings.visible = $settings_toggle.pressed

func load_level_visuals():
	for i in range(20):
		var dat = load_level_dat(i, true)
		if dat != null:
			change_level_texture(dat[\"level_icon\"][1] + \"/Visual/Level/\" + dat[\"level_icon\"][0], \"icon\", i)
			var variant = 0
			if level_group_dat[\"levels\"][i][1]: variant = 1
			change_level_texture(data.base_data[dat[\"level_base\"][1]][dat[\"level_base\"][0]][variant][1] + \"/Visual/Level/\" + data.base_data[dat[\"level_base\"][1]][dat[\"level_base\"][0]][variant][0], \"base\", i)
		else:
			change_level_texture(\"res://Visual/Level/questionmark.png\", \"icon\", i)
			if level_group_dat[\"levels\"][i][1]: change_level_texture(\"res://Visual/Level/base_locked.png\", \"base\", i)
			else: change_level_texture(\"res://Visual/Level/base_neutral.png\", \"base\", i)

func change_level_visual(index, type : String):
	var text_path
	if level_group_dat[\"levels\"][current_level][0] == \"*Level_Missing\":
		if type == \"icon\":
			text_path = \"res://Visual/Level/questionmark.png\"
		else:
			text_path = \"res://Visual/Level/base_locked.png\"
	else:
		var info : OptionButton = get_node(\"level_edits/level_\" + type)
		if type == \"icon\":
			text_path = info.get_item_metadata(index) + \"/Visual/Level/\" + info.get_item_text(index)
		else:
			var variant = 0
			if level_group_dat[\"levels\"][current_level][1]: variant = 1
			text_path = data.base_data[info.get_item_metadata(index)][info.get_item_text(index)][variant][1] + \"/Visual/Level/\" + data.base_data[info.get_item_metadata(index)][info.get_item_text(index)][variant][0]
	change_level_texture(text_path, type, current_level)

func change_level_texture(change_to : String, type : String, level : int):
	var current_level_visual = get_node(\"levels/\" + String(level) + \"/\" + type)
	current_level_visual.texture = load(change_to)

func picture_changed():
	#print(current_group_path)
	$title/picture.texture = data.load_texture_from_png(current_group_path + \"/title.png\")
	if $title/picture.texture == null:
		$title/picture.texture = preload(\"res://Visual/Title/title_custom.png\")
	$title/logo.texture = data.load_texture_from_png(current_group_path + \"/logo.png\")
	if $title/logo.texture == null:
		$title/logo.texture = preload(\"res://Visual/Title/logo_custom.png\")
	#var text_path = $Edits/picture.get_item_metadata(index) + \"/Visual/Level/\" + $Edits/picture.get_item_text(index)
	#level_group_dat[\"picture\"] = text_path
	#$title/menu_waterway.texture = load(text_path)

func _exit_tree():
	save_level_dat()
	save_current_group(current_group_path)

func ready_optionbutton_setup(option_button : OptionButton, data_array : Array):
	var last_directory : String = \"res:/\"
	for i in data_array:
		if last_directory != i[1]:
			option_button.add_item(\" - \" + i[1] + \" - \")
			option_button.set_item_disabled(option_button.get_item_count() - 1, true)
			last_directory = i[1]
		option_button.add_item(i[0])
		option_button.set_item_metadata(option_button.get_item_count() - 1, i[1])

func save_current_group(dir, defaults : bool = false):
	var file = File.new()
	var temp = {}
	
	save_level_dat()
	
	if defaults:
		temp = {}
		temp[\"levels\"] = []
		for _i in range(20):
			temp[\"levels\"].append([\"*Level_Missing\", true, [0, \"\", \"\"]])
		temp[\"dependencies\"] = []
		temp[\"unlock\"] = [0, \"\", \"\"]
		temp[\"author\"] = data.settings[\"editor_author_name\"]
		temp[\"ui_color\"] = [0.02, 0.9, 0.63]
	else:
		level_group_dat[\"dependencies\"] = data.mods_installed.duplicate()
		
		level_group_dat[\"unlock\"][0] = $settings/unlock_type.selected
		level_group_dat[\"unlock\"][1] = $\"settings/1_text\".text
		if level_group_dat[\"unlock\"][0] == UNLOCK_COMPLETION or level_group_dat[\"unlock\"][0] == UNLOCK_BONUS:
			level_group_dat[\"unlock\"][2] = $\"settings/2_number\".value
		else:
			level_group_dat[\"unlock\"][2] = $\"settings/2_text\".text
		
		level_group_dat[\"author\"] = $settings/author.text
		level_group_dat[\"ui_color\"][0] = $settings/ui_color.color.r
		level_group_dat[\"ui_color\"][1] = $settings/ui_color.color.g
		level_group_dat[\"ui_color\"][2] = $settings/ui_color.color.b
		
		level_group_dat[\"tags\"] = []
		if $settings/hide_author.pressed:
			level_group_dat[\"tags\"].append(\"hide_author\")
		
		temp = level_group_dat.duplicate()
		
	
	file.open(dir + \"/level_group.dat\", File.WRITE)
	file.store_line(to_json(temp))
	file.close()

func load_group_popup():
	$load.popup()

func load_group(dir):
	if current_group_path != \"\": save_current_group(current_group_path)
	
	var file = File.new()
	var temp = {}
	var directory = Directory.new()
	
	directory.open(dir)
	directory.list_dir_begin(true)
	if directory.get_next() == \"\":
		save_current_group(dir, true)
	directory.list_dir_end()
	
	if file.file_exists(dir + \"/level_group.dat\"):
		file.open(dir + \"/level_group.dat\", File.READ)
		
		while file.get_position() < file.get_len():
			var parsedData = parse_json(file.get_line())
			
			temp = parsedData
		
		file.close()
		
		if !temp.has(\"levels\"):
			temp[\"levels\"] = []
			for _i in range(20): temp[\"levels\"].append([\"*Level_Missing\", true, [0, \"\", \"\"]])
		else:
			for i in range(20):
				if temp[\"levels\"][i].size() == 2:
					temp[\"levels\"][i].append([0, \"\", \"\"])
				if typeof(temp[\"levels\"][i][2]) != TYPE_ARRAY:
					temp[\"levels\"][i][2] = [0, \"\", \"\"]
		if !temp.has(\"dependencies\"):
			temp[\"dependencies\"] = []
		for i in temp[\"dependencies\"]:
			if !data.mods_installed.has(i):
				$dependendy_fail.popup()
				return
		if not temp.has(\"bg\"):
			temp[\"bg\"] = \"*none\"
		if not temp.has(\"author\"):
			temp[\"author\"] = data.settings[\"editor_author_name\"]
		if not temp.has(\"ui_color\"):
			temp[\"ui_color\"] = [0.02, 0.9, 0.63]
		
		if not temp.has(\"tags\"):
			temp[\"tags\"] = []
		
		if temp.has(\"unlock\"):
			data.changed_unlock_type(temp[\"unlock\"][0], $settings/text_edit, $settings/unlock_type, $\"settings/1_text\", $\"settings/2_text\", $\"settings/2_number\", \"\\n\")
			$\"settings/1_text\".text = temp[\"unlock\"][1]
			if temp[\"unlock\"][0] == UNLOCK_COMPLETION or temp[\"unlock\"][0] == UNLOCK_BONUS:
				$\"settings/2_number\".value = temp[\"unlock\"][2]
			else:
				$\"settings/2_text\".text = temp[\"unlock\"][2]
		else:
			data.changed_unlock_type(0, $settings/text_edit, $settings/unlock_type, $\"settings/1_text\", $\"settings/2_text\", $\"settings/2_number\", \"\\n\")
			temp[\"unlock\"] = [0, \"\", \"\"]
		
		level_group_dat = temp.duplicate()
		
		if current_group_path == \"\":
			$level_edits/filename.disabled = false
			$level_edits/locked.disabled = false
			$level_edits/completion.editable = true
			$group/refresh.disabled = false
			$settings/bg.disabled = false
			$settings/author.editable = true
			$level_edits/import.disabled = false
			$settings/unlock_type.disabled = false
			$\"settings/1_text\".editable = true
			$\"settings/2_text\".editable = true
			$\"settings/2_number\".editable = true
		
		for i in range($settings/bg.get_item_count()):
			if $settings/bg.get_item_metadata(i) + \"/Objects/Backgrounds/\" + $settings/bg.get_item_text(i) == temp[\"bg\"]:
				$settings/bg.select(i)
				break
		
		$settings/author.text = level_group_dat[\"author\"]
		$settings/ui_color.color.r = level_group_dat[\"ui_color\"][0]
		$settings/ui_color.color.g = level_group_dat[\"ui_color\"][1]
		$settings/ui_color.color.b = level_group_dat[\"ui_color\"][2]
		$settings/hide_author.pressed = level_group_dat[\"tags\"].has(\"hide_author\")
		
		current_group_path = dir
		current_level = 0
		levels_option_button()
		load_level_visuals()
		load_level_dat(current_level)
		picture_changed()
	else:
		$load_fail.popup()

func new_group_popup():
	$new.popup()

func new_group():
	var user_path : String = \"user://SRLevels/\" + $new/name.text
	var directory = Directory.new()
	
	directory.make_dir_recursive(user_path)
	load_group(user_path)

func import_popup():
	$import.popup()

func import(dir : String):
	var directory = Directory.new()
	
	var file = File.new()
	var temp = {}
	if file.file_exists(dir.substr(0, dir.find_last(\".\")) + \".dat\"):
		file.open(dir.substr(0, dir.find_last(\".\")) + \".dat\", File.READ)
		
		while file.get_position() < file.get_len():
			var parsedData = parse_json(file.get_line())
			
			temp = parsedData
		
		file.close()
	else:
		return
	
	for i in temp[\"dependencies\"]:
		if !level_group_dat[\"dependencies\"].has(i):
			$dependendy_fail.popup()
			return
	
	directory.copy(dir.substr(0, dir.find_last(\".\")) + \".dat\", current_group_path + \"/\" + dir.substr(dir.find_last(\"/\") + 1, dir.find_last(\".\") - dir.find_last(\"/\")) + \"dat\")
	directory.copy(dir, current_group_path + \"/\" + dir.substr(dir.find_last(\"/\") + 1, dir.length() - 1))
	
	levels_option_button()
	
	for i in range($level_edits/filename.get_item_count()):
		if $level_edits/filename.get_item_text(i) == dir.substr(dir.find_last(\"/\") + 1, dir.find_last(\".\") - dir.find_last(\"/\") - 1):
			$level_edits/filename.select(i)
			filename_selected(i)
			break
	
	$level_edits/locked.pressed = false

func levels_option_button():
	var directory = Directory.new()
	
	directory.open(current_group_path)
	directory.list_dir_begin(true)
	var current_file = directory.get_next()
	var level_names : Array = [[\"*Level_Missing\", \"res:/\"]]
	while current_file != \"\":
		if current_file.ends_with(\".tscn\"):
			level_names.append([current_file.substr(0, current_file.find_last(\".\")), \"Group Levels\"])
		current_file = directory.get_next()
	
	$level_edits/filename.clear()
	ready_optionbutton_setup($level_edits/filename, level_names)

func level_toggled(button_pressed, level):
	if button_pressed or level == current_level: save_level_dat()
	
	if button_pressed:
		current_level = level
		for i in range(20):
			if get_node(\"levels/\" + String(i)).pressed and i != level:
				get_node(\"levels/\" + String(i)).pressed = false
	elif level == current_level:
		get_node(\"levels/\" + String(level)).pressed = true
	
	if button_pressed or level == current_level: load_level_dat(level)

func save_level_dat():
	var file = File.new()
	var temp = {}
	
	if level_group_dat[\"levels\"][current_level][0] != \"*Level_Missing\":
		file.open(current_group_path + \"/\" + level_group_dat[\"levels\"][current_level][0] + \".dat\", File.READ)
		
		while file.get_position() < file.get_len():
			var parsedData = parse_json(file.get_line())
			
			temp = parsedData
		
		file.close()
		
		temp[\"level_name\"] = $level_edits/level_name.text
		temp[\"creator\"] = $level_edits/level_author.text
		if !temp.has(\"tags\"):
			temp[\"tags\"] = []
			temp.erase(\"official\")
		if temp.has(\"tags\") and $level_edits/level_official.pressed:
			temp[\"tags\"].append(\"official\")
		else:
			temp[\"tags\"].erase(\"official\")
		temp[\"level_icon\"] = [$level_edits/level_icon.get_item_text($level_edits/level_icon.selected),$level_edits/level_icon.get_selected_metadata()]
		temp[\"level_base\"] = [$level_edits/level_base.get_item_text($level_edits/level_base.selected),$level_edits/level_base.get_selected_metadata()]
		
		#level_group_dat[\"levels\"][current_level][0] = $Edits/filename.get_item_text($Edits/filename.get_selected_id())
		#level_group_dat[\"levels\"][current_level][1] = $Edits/locked.pressed
		
		level_group_dat[\"levels\"][current_level][2] = [$level_edits/level_unlock_type.selected, $\"level_edits/level_1_text\".text, \"\"]
		if $level_edits/level_unlock_type.selected == UNLOCK_COMPLETION or $level_edits/level_unlock_type.selected == UNLOCK_BONUS:
			level_group_dat[\"levels\"][current_level][2][2] = $\"level_edits/level_2_number\".value
		else:
			level_group_dat[\"levels\"][current_level][2][2] = $\"level_edits/level_2_text\".text
		
		#print(current_group_path + \"/\" + level_group_dat[\"levels\"][current_level][0] + \".dat\")
		file.open(current_group_path + \"/\" + level_group_dat[\"levels\"][current_level][0] + \".dat\", File.WRITE)
		file.store_line(to_json(temp))
		file.close()

func load_level_dat(level : int, values_only : bool = false):
	var file = File.new()
	var temp = {}
	if level_group_dat[\"levels\"][level][0] != \"*Level_Missing\":
		file.open(current_group_path + \"/\" + level_group_dat[\"levels\"][level][0] + \".dat\", File.READ)
		
		while file.get_position() < file.get_len():
			var parsedData = parse_json(file.get_line())
			
			temp = parsedData
		
		if values_only: return temp
		$level_edits/level_name.editable = true
		$level_edits/level_author.editable = true
		$level_edits/level_official.disabled = false
		$level_edits/level_icon.disabled = false
		$level_edits/level_base.disabled = false
		$level_edits/locked.disabled = false
		
		$level_edits/level_name.text = temp[\"level_name\"]
		$level_edits/level_author.text = temp[\"creator\"]
		if temp.has(\"tags\"):
			$level_edits/level_official.pressed = temp[\"tags\"].has(\"official\")
		else:
			$level_edits/level_official.pressed = temp[\"official\"]
		for i in range($level_edits/level_icon.get_item_count()):
			if $level_edits/level_icon.get_item_text(i) == temp[\"level_icon\"][0] and $level_edits/level_icon.get_item_metadata(i) == temp[\"level_icon\"][1]:
				$level_edits/level_icon.select(i)
				break
		for i in range($level_edits/level_base.get_item_count()):
			if $level_edits/level_base.get_item_text(i) == temp[\"level_base\"][0] and $level_edits/level_base.get_item_metadata(i) == temp[\"level_base\"][1]:
				$level_edits/level_base.select(i)
				break
		for i in range($level_edits/filename.get_item_count()):
			if $level_edits/filename.get_item_text(i) == level_group_dat[\"levels\"][level][0]:
				$level_edits/filename.select(i)
				break
		
		$level_edits/level_unlock_type.select(level_group_dat[\"levels\"][current_level][2][0])
		
		locked_toggled(level_group_dat[\"levels\"][level][1], true)
		
		$\"level_edits/level_1_text\".text = level_group_dat[\"levels\"][current_level][2][1]
		if $level_edits/level_unlock_type.selected == UNLOCK_COMPLETION or $level_edits/level_unlock_type.selected == UNLOCK_BONUS:
			$\"level_edits/level_2_number\".value = level_group_dat[\"levels\"][current_level][2][2] 
		else:
			$\"level_edits/level_2_text\".text = level_group_dat[\"levels\"][current_level][2][2] 
		
		file.close()
	elif !values_only:
		$level_edits/level_name.editable = false
		$level_edits/level_author.editable = false
		$level_edits/level_official.disabled = true
		$level_edits/level_icon.disabled = true
		$level_edits/level_base.disabled = true
		
		$level_edits/level_name.text = \"\"
		$level_edits/level_author.text = \"\"
		$level_edits/level_official.pressed = false
		$level_edits/level_icon.select(0)
		$level_edits/level_base.select(0)
		$level_edits/filename.select(0)
		
		$level_edits/locked.disabled = true
		locked_toggled(true, true)
	else:
		return null

func on_exit():
	# warning-ignore:return_value_discarded
	get_tree().change_scene(\"res://Scenes/menu.tscn\")

func filename_selected(index):
	save_level_dat()
	level_group_dat[\"levels\"][current_level][0] = $level_edits/filename.get_item_text(index)
	load_level_dat(current_level)
	
	$level_edits/locked.pressed = $level_edits/filename.get_item_text(index) == \"*Level_Missing\"
	
	change_level_visual($level_edits/level_icon.selected, \"icon\")
	#change_level_visual($level_edits/level_base.selected, \"base\")

func locked_toggled(button_pressed, scripted : bool = false):
	if scripted: $level_edits/locked.pressed = button_pressed
	level_group_dat[\"levels\"][current_level][1] = button_pressed
	change_level_visual($level_edits/level_base.selected, \"base\")
	if button_pressed and !$level_edits/locked.disabled:
		data.changed_unlock_type($level_edits/level_unlock_type.selected, $level_edits/text_level_unlocks, $level_edits/level_unlock_type, $\"level_edits/level_1_text\", $\"level_edits/level_2_text\", $\"level_edits/level_2_number\", \"\")
	else:
		data.changed_unlock_type(-1, $level_edits/text_level_unlocks, $level_edits/level_unlock_type, $\"level_edits/level_1_text\", $\"level_edits/level_2_text\", $\"level_edits/level_2_number\", \"\")

func completion_changed(value):
	return
	#print(value)
	level_group_dat[\"levels\"][current_level][2] = value

func bg_changed(index):
	if $settings/bg.get_item_metadata(index) == \"*\":
		level_group_dat[\"bg\"] = \"*none\"
	else:
		level_group_dat[\"bg\"] = $settings/bg.get_item_metadata(index) + \"/Objects/Backgrounds/\" + $settings/bg.get_item_text(index)

func changed_unlock_type(index, connecting_from : String):
	if connecting_from == \"group_unlock\":
		data.changed_unlock_type(index, $settings/text_edit, $settings/unlock_type, $\"settings/1_text\", $\"settings/2_text\", $\"settings/2_number\", \"\\n\")
	if connecting_from == \"level_unlock\":
		data.changed_unlock_type(index, $level_edits/text_level_unlocks, $level_edits/level_unlock_type, $\"level_edits/level_1_text\", $\"level_edits/level_2_text\", $\"level_edits/level_2_number\", \"\")
"

[sub_resource type="GDScript" id=2]
script/source = "extends Button


func _ready():
	pass
"

[node name="level_group" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 2 )
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="title" type="Panel" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -520.0
margin_top = -392.0
margin_right = 520.0
margin_bottom = -56.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="picture" type="Sprite" parent="title"]
position = Vector2( 520, 168 )

[node name="logo" type="Sprite" parent="title"]
position = Vector2( 168, 40 )

[node name="levels" type="Panel" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -520.0
margin_top = -40.0
margin_right = 8.0
margin_bottom = 392.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="0" type="Button" parent="levels"]
margin_left = 40.0
margin_top = 40.0
margin_right = 104.0
margin_bottom = 104.0
toggle_mode = true
script = SubResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="base" type="Sprite" parent="levels/0"]
position = Vector2( 32, 32 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 1 )

[node name="icon" type="Sprite" parent="levels/0"]
position = Vector2( 32, 32 )
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 3 )

[node name="level_edits" type="Control" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -512.0
margin_top = -384.0
margin_right = 512.0
margin_bottom = 384.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Text" parent="level_edits" instance=ExtResource( 5 )]
margin_left = 488.0
margin_top = 384.0
margin_right = -216.0
margin_bottom = 384.0
bbcode_enabled = true
bbcode_text = "[right]File
Locked




Name
Creator
Official
Icon
Base[/right]"
text = "File
Locked




Name
Creator
Official
Icon
Base"

[node name="filename" type="OptionButton" parent="level_edits"]
margin_left = 656.0
margin_top = 384.0
margin_right = 920.0
margin_bottom = 416.0
disabled = true
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="locked" type="CheckBox" parent="level_edits"]
margin_left = 648.0
margin_top = 408.0
margin_right = 696.0
margin_bottom = 456.0
disabled = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="text_level_unlocks" parent="level_edits" instance=ExtResource( 5 )]
margin_left = 536.0
margin_top = 448.0
margin_right = -88.0
margin_bottom = -64.0
text = ""

[node name="level_unlock_type" type="OptionButton" parent="level_edits"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 224.0
margin_top = 64.0
margin_right = 480.0
margin_bottom = 96.0
text = "Always Unlocked"
clip_text = true
items = [ "Always Unlocked", null, true, 1, null, "Beat Level", null, false, 2, null, "Par Level", null, false, 3, null, "Group Completion", null, false, 4, null, "Bonus Amount", null, false, 5, null, "Custom Unlock", null, false, 6, null, "Level Unlock", null, false, 6, null ]
selected = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_1_text" type="LineEdit" parent="level_edits"]
margin_left = 736.0
margin_top = 480.0
margin_right = 992.0
margin_bottom = 512.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_2_text" type="LineEdit" parent="level_edits"]
margin_left = 736.0
margin_top = 512.0
margin_right = 992.0
margin_bottom = 544.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_2_number" type="SpinBox" parent="level_edits"]
margin_left = 736.0
margin_top = 512.0
margin_right = 992.0
margin_bottom = 544.0

[node name="completion" type="SpinBox" parent="level_edits"]
visible = false
margin_left = 696.0
margin_top = 416.0
margin_right = 920.0
margin_bottom = 448.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_name" type="LineEdit" parent="level_edits"]
margin_left = 656.0
margin_top = 576.0
margin_right = 992.0
margin_bottom = 608.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_author" type="LineEdit" parent="level_edits"]
margin_left = 656.0
margin_top = 608.0
margin_right = 992.0
margin_bottom = 640.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_official" type="CheckBox" parent="level_edits"]
margin_left = 648.0
margin_top = 632.0
margin_right = 696.0
margin_bottom = 680.0
disabled = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_icon" type="OptionButton" parent="level_edits"]
margin_left = 656.0
margin_top = 672.0
margin_right = 992.0
margin_bottom = 704.0
disabled = true
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="level_base" type="OptionButton" parent="level_edits"]
margin_left = 656.0
margin_top = 704.0
margin_right = 992.0
margin_bottom = 736.0
disabled = true
clip_text = true

[node name="import" type="TextureButton" parent="level_edits"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 416.0
margin_right = 480.0
margin_bottom = 64.0
disabled = true
texture_normal = ExtResource( 13 )
texture_pressed = ExtResource( 12 )
texture_disabled = ExtResource( 7 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="group" type="Control" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -512.0
margin_top = -384.0
margin_right = 512.0
margin_bottom = -64.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="refresh" type="TextureButton" parent="group"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -384.0
margin_top = -32.0
margin_right = -320.0
margin_bottom = 32.0
disabled = true
texture_normal = ExtResource( 14 )
texture_pressed = ExtResource( 15 )
texture_disabled = ExtResource( 7 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="exit" type="TextureButton" parent="group"]
margin_left = 32.0
margin_top = 32.0
margin_right = 96.0
margin_bottom = 96.0
texture_normal = ExtResource( 11 )
texture_pressed = ExtResource( 10 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="new" type="TextureButton" parent="group"]
margin_left = 32.0
margin_top = 128.0
margin_right = 96.0
margin_bottom = 192.0
texture_normal = ExtResource( 13 )
texture_pressed = ExtResource( 12 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="load" type="TextureButton" parent="group"]
margin_left = 32.0
margin_top = 224.0
margin_right = 96.0
margin_bottom = 288.0
texture_normal = ExtResource( 6 )
texture_pressed = ExtResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="settings" type="Control" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -384.0
margin_top = -384.0
margin_right = 384.0
margin_bottom = -64.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="explanation_1" parent="settings" instance=ExtResource( 5 )]
margin_left = 32.0
margin_top = 64.0
margin_right = -352.0
margin_bottom = 128.0
text = "Author

Hide Author

"

[node name="author" type="LineEdit" parent="settings"]
margin_left = 32.0
margin_top = 96.0
margin_right = 224.0
margin_bottom = 128.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="hide_author" type="CheckBox" parent="settings"]
margin_left = 24.0
margin_top = 152.0
margin_right = 72.0
margin_bottom = 200.0

[node name="text_edit" parent="settings" instance=ExtResource( 5 )]
margin_left = 288.0
margin_top = 64.0
margin_right = -80.0
margin_bottom = 128.0
text = "Unlock Type"

[node name="unlock_type" type="OptionButton" parent="settings"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -96.0
margin_top = -64.0
margin_right = 96.0
margin_bottom = -32.0
disabled = true
text = "Always Unlocked"
clip_text = true
items = [ "Always Unlocked", null, false, 0, null, "Beat Level", null, false, 1, null, "Par Level", null, false, 2, null, "Group Completion", null, false, 3, null, "Bonus Amount", null, false, 4, null, "Custom Unlock", null, false, 5, null, "Never Unlocked", null, false, 6, null ]
selected = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="1_text" type="LineEdit" parent="settings"]
margin_left = 288.0
margin_top = 160.0
margin_right = 480.0
margin_bottom = 192.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="2_text" type="LineEdit" parent="settings"]
margin_left = 288.0
margin_top = 224.0
margin_right = 480.0
margin_bottom = 256.0
editable = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="2_number" type="SpinBox" parent="settings"]
margin_left = 288.0
margin_top = 224.0
margin_right = 480.0
margin_bottom = 256.0
editable = false

[node name="explanation_2" parent="settings" instance=ExtResource( 5 )]
margin_left = 544.0
margin_top = 64.0
margin_right = 160.0
margin_bottom = 128.0
text = "BG

UI Color
"

[node name="bg" type="OptionButton" parent="settings"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 160.0
margin_top = -64.0
margin_right = 352.0
margin_bottom = -32.0
disabled = true
text = "none"
clip_text = true
items = [ "none", null, false, 0, null ]
selected = 0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ui_color" type="ColorPickerButton" parent="settings"]
margin_left = 544.0
margin_top = 160.0
margin_right = 736.0
margin_bottom = 192.0
color = Color( 0.0196078, 0.901961, 0.631373, 1 )
edit_alpha = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="settings_toggle" type="TextureButton" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 416.0
margin_top = -352.0
margin_right = 480.0
margin_bottom = -288.0
toggle_mode = true
texture_normal = ExtResource( 4 )
texture_pressed = ExtResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="load" type="FileDialog" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -384.0
margin_top = -384.0
margin_right = 384.0
margin_bottom = 392.0
window_title = "Open a Directory"
mode = 2
access = 1
current_dir = "user://SRLevels"
current_file = "bridge_test.dat"
current_path = "user://SRLevels/bridge_test.dat"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="load_fail" type="AcceptDialog" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -128.0
margin_top = -64.0
margin_right = 128.0
margin_bottom = 64.0
window_title = "Oops!"
dialog_text = "Failed to load
the level group."

[node name="dependendy_fail" type="AcceptDialog" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -176.0
margin_top = -64.0
margin_right = 176.0
margin_bottom = 64.0
window_title = "Oops!"
dialog_text = "You dont have the
required mods installed"

[node name="new" type="AcceptDialog" parent="."]
anchor_left = 0.499
anchor_top = 0.5
anchor_right = 0.499
anchor_bottom = 0.5
margin_left = -174.976
margin_top = -48.0
margin_right = 174.024
margin_bottom = 40.0
window_title = "Name the New Group"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="name" type="LineEdit" parent="new"]
margin_left = 8.0
margin_top = 8.0
margin_right = 341.0
margin_bottom = 40.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="import" type="FileDialog" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -392.0
margin_top = -392.0
margin_right = 384.0
margin_bottom = 392.0
window_title = "Open a File"
mode = 0
access = 1
filters = PoolStringArray( "*.tscn ; Text Scene" )
current_dir = "user://SRLevels"
current_file = "SRLevel"
current_path = "user://SRLevels/SRLevel"
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="toggled" from="levels/0" to="." method="level_toggled" binds= [ 0 ]]
[connection signal="item_selected" from="level_edits/filename" to="." method="filename_selected"]
[connection signal="toggled" from="level_edits/locked" to="." method="locked_toggled"]
[connection signal="item_selected" from="level_edits/level_unlock_type" to="." method="changed_unlock_type" binds= [ "level_unlock" ]]
[connection signal="value_changed" from="level_edits/completion" to="." method="completion_changed"]
[connection signal="item_selected" from="level_edits/level_icon" to="." method="change_level_visual" binds= [ "icon" ]]
[connection signal="item_selected" from="level_edits/level_base" to="." method="change_level_visual" binds= [ "base" ]]
[connection signal="pressed" from="level_edits/import" to="." method="import_popup"]
[connection signal="pressed" from="group/refresh" to="." method="picture_changed"]
[connection signal="pressed" from="group/exit" to="." method="on_exit"]
[connection signal="pressed" from="group/new" to="." method="new_group_popup"]
[connection signal="pressed" from="group/load" to="." method="load_group_popup"]
[connection signal="item_selected" from="settings/unlock_type" to="." method="changed_unlock_type" binds= [ "group_unlock" ]]
[connection signal="item_selected" from="settings/bg" to="." method="bg_changed"]
[connection signal="dir_selected" from="load" to="." method="load_group"]
[connection signal="confirmed" from="new" to="." method="new_group"]
[connection signal="file_selected" from="import" to="." method="import"]
